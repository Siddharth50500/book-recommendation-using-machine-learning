# -*- coding: utf-8 -*-
"""student performance

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1flxv5JxJ9jHwG6aN0nlvnHavjttBCslJ
"""

import pandas as pd

df = pd.read_csv('/content/StudentsPerformance.csv')

df.head()



df.tail()

df.info()

df.nunique()

df['gender'].value_counts()

df['race/ethnicity'].value_counts()

df['parental level of education'].value_counts()

df['lunch'].value_counts()

df['test preparation course'].value_counts()

df.describe()

df.groupby('race/ethnicity')['gender'].value_counts()

df.groupby('race/ethnicity')['parental level of education'].value_counts()

df.groupby('lunch')['race/ethnicity'].value_counts()

df.groupby('lunch')['gender'].value_counts()

df.groupby('test preparation course')['race/ethnicity'].value_counts()

df.groupby('test preparation course')['parental level of education'].value_counts()

df['math score'].describe()

df['math score'].value_counts().head(10)

df[df['math score'] == 100]['math score'].count()

df[df['math score'] == 100]

df[df['math score'] == 0]['math score'].count()

df[df['math score'] == 0]

df[df['math score'] < 50]['math score'].count()

bad_math_score = df[df['math score'] < 50]
bad_math_score.groupby('parental level of education')['math score'].count().sort_values(ascending=False)

bad_math_score.groupby('race/ethnicity')['math score'].count().sort_values(ascending=False)



bad_math_score.groupby('test preparation course')['math score'].count().sort_values(ascending=False)

df['reading score'].describe()

df['reading score'].value_counts().head(10)

df[(df['reading score'] == 100)]['reading score'].count()

df[(df['reading score'] == 100)]

df[(df['reading score'] == 0)]['reading score'].count()

df[df['reading score'] < 50]['reading score'].count()

bad_read_score = df[df['reading score'] < 50]
bad_read_score.groupby('parental level of education')['reading score'].count().sort_values(ascending=False)

bad_read_score.groupby('race/ethnicity')['reading score'].count().sort_values(ascending=False)

df[(df['reading score'] < 50)]['test preparation course'].value_counts()

df['writing score'].describe()

df['writing score'].value_counts().head(10)

df[(df['writing score'] == 100)]['writing score'].count()

df[(df['writing score'] == 100)]

df[df['writing score'] == 0]['writing score'].count()

df[df['writing score'] < 50]['writing score'].count()

bad_write_score = df[df['writing score'] < 50]
bad_write_score.groupby('parental level of education')['writing score'].count().sort_values(ascending=False)

bad_write_score.groupby('race/ethnicity')['writing score'].count().sort_values(ascending=False)

df[(df['writing score'] < 50) & (df['test preparation course'])]['test preparation course'].value_counts()

coor_mat=df.corr()

coor_mat.info()

coor_mat.head()

df.info()

df.isnull().sum()

print(df['gender'].value_counts())
print(df['race/ethnicity'].value_counts())
print(df['parental level of education'].value_counts())
print(df['lunch'].value_counts())
print(df['test preparation course'].value_counts())

df.replace({'gender':{'female':0,'male':1}},inplace=True)
df.replace({'race/ethnicity':{'group C':0,'group D':1,'group B':2,'group E':3,'group A':3}},inplace=True)
df.replace({'parental level of education':{'some college':0,"associate's degree":1,'high school':2,'some high school':3,"bachelor's degree":3,"master's degree":3}},inplace=True)
df.replace({'lunch':{'standard':0,'free/reduced':1}},inplace=True)
df.replace({'test preparation course':{'none':0,'completed':1}},inplace=True)



df.head()

coor_mat=df.corr()

coor_mat.head()

X = df.drop(['writing score'],axis=1)
Y = df['writing score']

print(X)

print(Y)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from xgboost import XGBRegressor
from sklearn.linear_model import LogisticRegression
from sklearn import metrics

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, random_state=2)

lin_reg_model = LinearRegression()
lin_reg_model.fit(X_train,Y_train)

training_data_prediction = lin_reg_model.predict(X_train)

error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual gpa")
plt.ylabel("Predicted gpa")
plt.title(" except writing vs writing")
plt.show()

test_data_prediction = lin_reg_model.predict(X_test)

error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual gpa")
plt.ylabel("Predicted gpa")
plt.title(" except writing vs writing")
plt.show()

lass_reg_model = Lasso()
lass_reg_model.fit(X_train,Y_train)

training_data_prediction = lass_reg_model.predict(X_train)

error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual gpa")
plt.ylabel("Predicted gpa")
plt.title(" Actual gpa vs Predicted gpa")
plt.show()

test_data_prediction = lass_reg_model.predict(X_test)

error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual gpa")
plt.ylabel("Predicted gpa")
plt.title(" Actual gpa vs Predicted gpa")
plt.show()

regressor = XGBRegressor()

regressor.fit(X_train, Y_train)

training_data_prediction = regressor.predict(X_train)

r2_train = metrics.r2_score(Y_train, training_data_prediction)

print('R Squared value = ', r2_train)

test_data_prediction = regressor.predict(X_test)

r2_test = metrics.r2_score(Y_test, test_data_prediction)

print('R Squared value = ', r2_test)