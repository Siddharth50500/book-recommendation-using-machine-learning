# -*- coding: utf-8 -*-
"""final gpa prectio n using iq test

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17jsyNMTebrTOCjRTiQ5Cm-ZZeY7eyQAx
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from xgboost import XGBRegressor
from sklearn.linear_model import LogisticRegression
from sklearn import metrics

gpa_data = pd.read_csv('/content/gpa_iq.csv')

pd.read_csv

gpa_data.head()

gpa_data.shape

gpa_data.describe()

gpa_data.info()

gpa_data.isnull().sum()

X = gpa_data.drop(['gpa'],axis=1)
Y = gpa_data['gpa']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, random_state=2)

lin_reg_model = LinearRegression()
lin_reg_model.fit(X_train,Y_train)

training_data_prediction = lin_reg_model.predict(X_train)

error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual gpa")
plt.ylabel("Predicted gpa")
plt.title(" Actual gpa vs Predicted gpa")
plt.show()

test_data_prediction = lin_reg_model.predict(X_test)

error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual gpa")
plt.ylabel("Predicted gpa")
plt.title(" Actual gpa vs Predicted gpa")
plt.show()

lass_reg_model = Lasso()
lass_reg_model.fit(X_train,Y_train)

training_data_prediction = lass_reg_model.predict(X_train)

error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual gpa")
plt.ylabel("Predicted gpa")
plt.title(" Actual gpa vs Predicted gpa")
plt.show()

test_data_prediction = lass_reg_model.predict(X_test)

error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual gpa")
plt.ylabel("Predicted gpa")
plt.title(" Actual gpa vs Predicted gpa")
plt.show()

regressor = XGBRegressor()

regressor.fit(X_train, Y_train)

training_data_prediction = regressor.predict(X_train)

r2_train = metrics.r2_score(Y_train, training_data_prediction)

print('R Squared value = ', r2_train)

test_data_prediction = regressor.predict(X_test)

r2_test = metrics.r2_score(Y_test, test_data_prediction)

print('R Squared value = ', r2_test)